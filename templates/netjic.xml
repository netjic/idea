<templateSet group="netjic">
  <template name="mmsq" value=" &lt;dependency&gt;&#10;      &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;      &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;      &lt;version&gt;8.0.22&lt;/version&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="mysql-connector-java 8.0.22" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mlombok" value=" &lt;dependency&gt;&#10;      &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;      &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;      &lt;version&gt;1.18.16&lt;/version&gt;&#10;      &lt;scope&gt;provided&lt;/scope&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="lombok1.18.16" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mjunit" value=" &lt;dependency&gt;&#10;      &lt;groupId&gt;junit&lt;/groupId&gt;&#10;      &lt;artifactId&gt;junit&lt;/artifactId&gt;&#10;      &lt;version&gt;4.13.1&lt;/version&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="junit4.13.1" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mpom" value=" &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;&lt;groupId&gt;cn.wei&lt;/groupId&gt;&#10;&lt;artifactId&gt;jsp003&lt;/artifactId&gt;&#10;&lt;version&gt;1.0&lt;/version&gt;&#10;&lt;packaging&gt;war&lt;/packaging&gt;&#10;&#10;&lt;properties&gt;&#10;  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;  &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;&#10;  &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;&#10;&lt;/properties&gt;&#10;&#10;&lt;dependencies&gt;&#10;&#10;&lt;/dependencies&gt;&#10;&lt;/project&gt;" shortcut="ENTER" description="pom.xml" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="jsp" value="&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Title&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" shortcut="ENTER" description="&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt;     &lt;meta charset=&quot;UTF-8&quot;&gt;     &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt;  &lt;/body&gt; &lt;/html&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="mbuild" value="&lt;build&gt;&#10;        &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;&#10;        &lt;testSourceDirectory&gt;src/test/java&lt;/testSourceDirectory&gt;&#10;        &lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;&#10;        &lt;!--处理无法加载配置文件 --&gt;&#10;        &lt;resources&gt;&#10;            &lt;resource&gt;&#10;                &lt;directory&gt;src/main/java&lt;/directory&gt;&#10;                &lt;includes&gt;&#10;                    &lt;include&gt;**/*.xml&lt;/include&gt;&#10;                    &lt;include&gt;**/*.properties&lt;/include&gt;&#10;                &lt;/includes&gt;&#10;            &lt;/resource&gt;&#10;            &lt;resource&gt;&#10;                &lt;directory&gt;src/main/resources&lt;/directory&gt;&#10;                &lt;includes&gt;&#10;                    &lt;include&gt;**/*.xml&lt;/include&gt;&#10;                    &lt;include&gt;**/*.properties&lt;/include&gt;&#10;                &lt;/includes&gt;&#10;            &lt;/resource&gt;&#10;        &lt;/resources&gt;&#10;    &lt;/build&gt;" shortcut="ENTER" description="&lt;build&gt;         &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;         &lt;testSourceDirectory&gt;src/test/java&lt;/testSourceDirectory&gt;         &lt;sourceDirectory&gt;src/main/java&lt;/sourceDirectory&gt;         &lt;!--处理无法加载配置文件 --&gt;         &lt;resources&gt;             &lt;resource&gt;                 &lt;directory&gt;src/main/java&lt;/directory&gt;                 &lt;includes&gt;                     &lt;include&gt;**/*.xml&lt;/include&gt;                     &lt;include&gt;**/*.properties&lt;/include&gt;                 &lt;/includes&gt;             &lt;/resource&gt;             &lt;resource&gt;                 &lt;directory&gt;src/main/resources&lt;/directory&gt;                 &lt;includes&gt;                     &lt;include&gt;**/*.xml&lt;/include&gt;                     &lt;include&gt;**/*.properties&lt;/include&gt;&lt;/includes&gt;  &lt;/resource&gt;         &lt;/resources&gt;     &lt;/build&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mservlet" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;&#10;            &lt;version&gt;4.0.1&lt;/version&gt;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;       " shortcut="ENTER" description="javax.servlet-api 4.0.1" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mjstl" value=" &lt;dependency&gt;&#10;      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;&#10;      &lt;artifactId&gt;jstl&lt;/artifactId&gt;&#10;      &lt;version&gt;1.2&lt;/version&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="jstl 1.2" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mjsp" value="&lt;dependency&gt;&#10;      &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;&#10;      &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;&#10;      &lt;version&gt;2.2&lt;/version&gt;&#10;      &lt;scope&gt;provided&lt;/scope&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="jsp-api 2.2" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="form" value="&lt;form action=&quot;$end$&quot;&gt;&#10;    账号：&lt;input type=&quot;text&quot;&gt;&lt;br&gt;&#10;    密码：&lt;input type=&quot;password&quot;&gt;&#10;    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&#10;&lt;/form&gt;&#10;" shortcut="ENTER" description="&lt;form action=&quot;&quot;&gt;     账号：&lt;input type=&quot;text&quot;&gt;&lt;br&gt;     密码：&lt;input type=&quot;password&quot;&gt; &lt;/form&gt;" toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="radio" value="&lt;form&gt;&#10;    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;&quot;&gt;?&lt;br&gt;&#10;    &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;&quot;&gt;?&#10;&lt;/form&gt;" shortcut="ENTER" description="&lt;form&gt;     &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;&quot;&gt;?&lt;br&gt;     &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;&quot;&gt;? &lt;/form&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="checkbox" value="&lt;form&gt;&#10;    &lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;&quot;&gt;?&lt;br&gt;&#10;    &lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;&quot;&gt;?&#10;&lt;/form&gt;" shortcut="ENTER" description="&lt;form&gt;     &lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;&quot;&gt;?&lt;br&gt;     &lt;input type=&quot;checkbox&quot; name=&quot;vehicle&quot; value=&quot;&quot;&gt;? &lt;/form&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="mis" value="Map&lt;Integer, String&gt; mis = new HashMap&lt;&gt;();" shortcut="ENTER" description="Map&lt;Integer, String&gt; is = new HashMap&lt;&gt;();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="mss" value=" Map&lt;String, String&gt; mss = new HashMap&lt;&gt;();" shortcut="ENTER" description="Map&lt;String, String&gt; ss = new HashMap&lt;&gt;();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="mso" value=" Map&lt;String, Object&gt; mso = new HashMap&lt;&gt;();" shortcut="ENTER" description="Map&lt;String, Object&gt; so = new HashMap&lt;&gt;();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="msi" value="Map&lt;String, Integer&gt; msi = new HashMap&lt;&gt;();" shortcut="ENTER" description="Map&lt;String, Integer&gt; si = new HashMap&lt;&gt;();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="ls" value=" List&lt;String&gt; ls = new ArrayList&lt;&gt;();" shortcut="ENTER" description="List&lt;String&gt; ls = new ArrayList&lt;&gt;();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="li" value="List&lt;Integer&gt; li = new ArrayList&lt;&gt;();" shortcut="ENTER" description="List&lt;Integer&gt; li = new ArrayList&lt;&gt;();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="ll" value=" List&lt;Long&gt; ll = new ArrayList&lt;&gt;();" shortcut="ENTER" description="List&lt;Long&gt; ll = new ArrayList&lt;&gt;();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="lb" value="List&lt;Double&gt; lb = new ArrayList&lt;&gt;();" shortcut="ENTER" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="html" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &#10;&lt;/body&gt;&#10;&lt;/html&gt;" shortcut="ENTER" description="&lt;/html&gt;&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="dbutils" value="package netjic;&#10;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.sql.*;&#10;import java.util.*;&#10;&#10;/**&#10; * &lt;p&gt;Description&lt;/p&gt;&#10; *&#10; * @Auther: netjic@163.com&#10; * @Date: 2020/11/05/19:30&#10; */&#10;public class JdbcUtils {&#10;    private Connection connection = null;&#10;    private String user = &quot;root&quot;;&#10;    private String password = &quot;&quot;;&#10;    private String driver = &quot;com.mysql.cj.jdbc.Driver&quot;;&#10;    private int port = 3306;&#10;    private String url = &quot;jdbc:mysql://localhost:3306/shopadmin?serverTimezone=PRC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSl=true&quot;;&#10;    private int currpage = 1;&#10;    private int pagesize = 5;&#10;    private int recordcount = 0;&#10;    private String host = &quot;localhost&quot;;&#10;    private String dbname = &quot;netjic&quot;;&#10;    private int page = 1;&#10;    private int size= 0;&#10;    private int pageSize = 9;&#10;    private int pagecount = 0;&#10;    private  int currcount = 0;&#10;&#10;&#10;    public int getPage() {&#10;        return page;&#10;    }&#10;&#10;    public void setPage(int page) {&#10;        this.page = page;&#10;    }&#10;&#10;    public int getPageSize() {&#10;        return pageSize;&#10;    }&#10;&#10;    public void setPageSize(int pageSize) {&#10;        this.pageSize = pageSize;&#10;    }&#10;&#10;    /*&#10;    默认无参构造连接本地数据库&#10;     */&#10;    public JdbcUtils() {&#10;        try {&#10;            Class.forName(driver);&#10;            connection = DriverManager.getConnection(this.url, this.user, this.password);&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        } catch (ClassNotFoundException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    /*&#10;    配置文件&#10;     */&#10;&#10;    public JdbcUtils(Boolean bool) {&#10;        InputStream is = JdbcUtils.class.getResourceAsStream(&quot;du.properties&quot;);&#10;        Properties prop = new Properties();&#10;&#10;        try {&#10;            prop.load(is);&#10;            this.driver = prop.getProperty(&quot;db.driver&quot;);&#10;            this.url = prop.getProperty(&quot;db.url&quot;);&#10;            this.user= prop.getProperty(&quot;db.user&quot;);&#10;            this.password = prop.getProperty(&quot;db.password&quot;);&#10;            Class.forName(driver);&#10;            connection = DriverManager.getConnection(this.url, this.user, this.password);&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        } catch (ClassNotFoundException e) {&#10;            e.printStackTrace();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /*&#10;    指定主机地址 用户名 密码 端口 数据库名&#10;     */&#10;    public JdbcUtils(String host, String user, String password, int port, String dbname) {&#10;        this.host = host;&#10;        this.user = user;&#10;        this.password = password;&#10;        this.port = port;&#10;        this.dbname = dbname;&#10;        url = String.format(&quot;jdbc:mysql://%s:%d/%s?useUnicode=true&amp;serverTimezone=PRC&amp;characterEncoding=utf8&amp;useSSL=true&quot;, this.host, this.port, this.dbname);&#10;        try {&#10;            Class.forName(driver);&#10;            connection = DriverManager.getConnection(url, this.user, this.password);&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        } catch (ClassNotFoundException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    /*&#10;    指定表名 获取主键&#10;     */&#10;    public String getTablePk(String tablename) {&#10;        String pk = null;&#10;        DatabaseMetaData dbmd;&#10;        try {&#10;            dbmd = this.connection.getMetaData();&#10;            ResultSet rs = dbmd.getPrimaryKeys(null, null, tablename);&#10;            if (rs.next()) {&#10;                pk = rs.getString(4);&#10;            }&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return pk;&#10;    }&#10;&#10;    /*&#10;    information_schema.KEY_COLUMN_USAGE表描述了具有约束的键列。&#10;    select column_name from information_schema.key_column_usage where table_name = 'stu'and constraint_name='PRIMARY';&#10;     */&#10;    public String getTablePk1(String tablename) {&#10;        String pk = null;&#10;        String sql = &quot;select column_name from information_schema.key_column_usage where table_name = ? and constraint_name='PRIMARY';&quot;;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            ps.setString(1, tablename);&#10;            ResultSet rs = ps.executeQuery();&#10;            rs.next();&#10;            pk = rs.getString(1);&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;&#10;        return pk;&#10;    }&#10;&#10;    /*&#10;    ju.insert(&quot;stu&quot;,hm)&#10;     */&#10;    public int insert(String tablename, Map&lt;String, Object&gt; m) {&#10;        int num = 0;&#10;        StringBuilder n = new StringBuilder();&#10;        StringBuilder v = new StringBuilder();&#10;        for (String k : m.keySet()) {&#10;            v.append(k + &quot;,&quot;);&#10;            n.append(&quot;?,&quot;);&#10;        }&#10;        String sql = String.format(&quot;insert into %s(%s)values(%s)&quot;, tablename, v.toString().substring(0, v.length() - 1), n.toString().substring(0, n.length() - 1));&#10;        PreparedStatement ps;&#10;        int i = 0;&#10;        try {&#10;            ps = connection.prepareStatement(sql);&#10;            for (Object o : m.values()) {&#10;                ps.setObject(++i, o);&#10;            }&#10;            num = ps.executeUpdate();&#10;            ps.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return num;&#10;    }&#10;&#10;    /*&#10;    ju.add(&quot;insert into stu (name,stunum,sex,brith)values(?,null,?,?)&quot;,&quot;刘帅棚&quot;,&quot;女&quot;,&quot;1996-5-2&quot;);&#10;     */&#10;    public int add(String sql, Object... parameter) {&#10;        int i = 0;&#10;        int num = 1;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            for (Object o : parameter) {&#10;                ps.setObject(num++, o);&#10;            }&#10;            i = ps.executeUpdate();&#10;            ps.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return i;&#10;    }&#10;&#10;    /*&#10;        删除单个&#10;        id=1&#10;     */&#10;    public int delete(String table, Object condintion1, Object condintion2) {&#10;        String sql = sql = String.format(&quot;delete from %s where %s = %s&quot;, table, condintion1, condintion2);&#10;        int result = 0;&#10;        int i = 1;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            result = ps.executeUpdate();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    /*&#10;    删除多个&#10;    第二个参数 &quot;id&lt;=50&quot;&#10;     */&#10;    public int delete(String table, String condition1) {&#10;        String sql =  String.format(&quot;delete from %s where %s&quot;, table, condition1);&#10;        System.out.println(sql);&#10;        int result = 0;&#10;        int i = 1;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            result = ps.executeUpdate();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    /*&#10;    表名 修改的字段名 sex 对应的值 男 条件所对应的字段名 值 stunum = 200013&#10;     ju.uptate(&quot;stu&quot;,&quot;sex&quot;,&quot;女&quot;,&quot;stunum&lt;&quot;,&quot;20017&quot;);&#10;     */&#10;    public int uptate(String tableName, String columnName, Object value, String columnN, Object columnV) {&#10;        int result = 0;&#10;        String sql = String.format(&quot;update %s set %s = ? where %s  ?&quot;, tableName, columnName, columnN);&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;&#10;            ps.setObject(1, value);&#10;            ps.setObject(2, columnV);&#10;            result = ps.executeUpdate();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;//    public static void test(String... args) {&#10;//        for(String arg : args) {&#10;//            System.out.println(arg);&#10;//        }&#10;//    }&#10;    /*&#10;jd.uptate(&quot;admin&quot;,&quot;account&quot;,&quot;admin&quot;,&quot;account&quot;,&quot;admin&quot;,&quot;password&quot;,&quot;456&quot;);&#10;     */&#10;    public int uptate(String tableName, String columnN, Object columnV, String... columnNameandvalues) {&#10;        int result = 0;&#10;        int i=0;&#10;        StringBuilder sql = new StringBuilder();&#10;        String[] ss= new String[columnNameandvalues.length];&#10;        sql = sql.append(&quot;update &quot;+ tableName+&quot; set &quot;);&#10;&#10;        for(String s : columnNameandvalues){&#10;            ss[i]=s;&#10;            if(i%2==0 &amp;&amp; i==0){&#10;                sql=sql.append(s+&quot;=?&quot;);&#10;&#10;            }else if(i%2==0){&#10;                sql=sql.append(&quot;,&quot;+s+&quot;=?&quot;);&#10;            }&#10;            i++;&#10;        }&#10;        sql.append( &quot; where &quot;+columnN+&quot;=?&quot;);&#10;        //System.out.println(sql.toString());&#10;        for (int j = 0; j &lt; ss.length; j++) {&#10;            System.out.println(ss[j]+j);&#10;        }&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql.toString());&#10;            for (int j = 0; j &lt; columnNameandvalues.length; j++) {&#10;                if (j%2!=0){&#10;                    if(j==1){&#10;                        ps.setObject(j, ss[j]);&#10;                        //System.out.println(ss[j]);&#10;                        //System.out.println(1);&#10;                    }else {&#10;                        ps.setObject((j+1)/2, ss[j]);&#10;                        //System.out.println((j+1)/2);&#10;                        //System.out.println(ss[j]);&#10;                    }&#10;&#10;                }&#10;            }&#10;            ps.setObject((columnNameandvalues.length)/2+1,columnV);&#10;            //System.out.println((columnNameandvalues.length)/2+1);&#10;&#10;            result = ps.executeUpdate();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    /*&#10;    批量更改 true  where true;&#10;     */&#10;    public int uptate(String tableName, String columnName, Object value, String condintion) {&#10;        int result = 0;&#10;        String sql = String.format(&quot;update %s set %s = ? where %s&quot;, tableName, columnName, condintion);&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            System.out.println(sql);&#10;            ps.setObject(1, value);&#10;&#10;            result = ps.executeUpdate();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    /*&#10;        查询所有 limit 从零开始&#10;     */&#10;    public List&lt;Map&lt;String, Object&gt;&gt; select(String tableName, int stratsum, int endsum) {&#10;        String sql = String.format(&quot;select * from %s limit %s,%s&quot;, tableName, stratsum, endsum);&#10;        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();&#10;        int count = 0;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            ResultSet rs = ps.executeQuery();&#10;            ResultSetMetaData psmd = rs.getMetaData();&#10;            count = psmd.getColumnCount();&#10;            //rs.next();&#10;            while (rs.next()) {&#10;                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;                for (int i = 1; i &lt;= count; i++) {&#10;                    hm.put(psmd.getColumnName(i), rs.getObject(i));&#10;                    //System.out.println(hm.size());&#10;                }&#10;                //System.out.println(hm);&#10;                list.add(hm);&#10;&#10;            }&#10;            rs.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return list;&#10;&#10;    }&#10;&#10;    /*&#10;    指定列&#10;              //表名       //查询什么     从哪到哪&#10;    ju.select(&quot;stuw&quot;,&quot;name,id,sex&quot;,1,4)&#10;    jd.select(&quot;admin&quot;,&quot;account&quot;,0,3));&#10;     */&#10;    public List&lt;Map&lt;String, Object&gt;&gt; select(String tableName, String condition, int stratsum, int endsum) {&#10;        String sql = String.format(&quot;select %s from %s order by %s asc  limit %s,%s&quot;, condition, tableName, getTablePk1(tableName),stratsum, endsum);&#10;&#10;        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();&#10;        int count = 0;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            ResultSet rs = ps.executeQuery();&#10;            ResultSetMetaData psmd = rs.getMetaData();&#10;            count = psmd.getColumnCount();&#10;            while (rs.next()) {&#10;                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;                for (int i = 1; i &lt;= count; i++) {&#10;                    hm.put(psmd.getColumnName(i), rs.getObject(i));&#10;                }&#10;                list.add(hm);&#10;            }&#10;            rs.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return list;&#10;    }&#10;&#10;    /*&#10;    pagesize 一页中有多少行&#10;    pages 第几行&#10;     */&#10;    public  int count(String tableName){&#10;        ResultSet li =null;&#10;        int l=0;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(String.format(&quot;select count(*) from %s&quot;,tableName));&#10;            li=ps.executeQuery();&#10;            while (li.next()){&#10;                l=li.getInt(1);&#10;            }&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return l;&#10;    }&#10;    /*&#10;    可以设置一页显示我多少条 第几页&#10;     */&#10;    public List&lt;Map&lt;String, Object&gt;&gt; select(String tableName, int pages,boolean b) {&#10;&#10;        int l =count(tableName);&#10;&#10;        //数据总数&#10;        size = count(tableName);&#10;        //页数&#10;        pagecount= (int)( l%pagesize==0 ?  l/pagesize : l/pagesize+1);&#10;        if (pages&gt;pagecount) pages=pagecount;&#10;        if (pages&lt;1) pages =1;&#10;&#10;&#10;        int index = (pages * pageSize) - pageSize;&#10;        //System.out.println(String.format(&quot;select %s from %s order by id asc limit %s , %s &quot;,condition,tableName,index,pageSize));&#10;        String sql = String.format(&quot;select %s from %s order by %s asc  limit %s , %s &quot;, &quot;*&quot;, tableName, getTablePk1(tableName),index, pageSize);&#10;        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();//0-5 5条 第一页  5-5 5条 第二页&#10;        //01234 1*（一页)-1 0 1*size-1 4&#10;        // 56789 2*(2ye)+1   2*size-1 9&#10;        // 1011121314 3*3+1  3*5-1&#10;        //1516171819 4*4-1   4*5-1&#10;        int count = 0;                                       // 1*size&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            //System.out.println(sql);&#10;            ResultSet rs = ps.executeQuery();&#10;            ResultSetMetaData psmd = rs.getMetaData();&#10;            count = psmd.getColumnCount();&#10;            while (rs.next()) {&#10;                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;                for (int i = 1; i &lt;= count; i++) {&#10;                    hm.put(psmd.getColumnName(i), rs.getObject(i));&#10;                }&#10;                list.add(hm);&#10;            }&#10;            rs.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return list;&#10;    }&#10;&#10;    public List&lt;Map&lt;String, Object&gt;&gt; select(String tableName, String where, int pages,boolean b) {&#10;&#10;        int l =count(tableName);&#10;&#10;        //数据总数&#10;        size = count(tableName);&#10;        //页数&#10;        pagecount= (int)( l%pagesize==0 ?  l/pagesize : l/pagesize+1);&#10;        if (pages&gt;pagecount) pages=pagecount;&#10;        if (pages&lt;1) pages =1;&#10;&#10;&#10;        int index = (pages * pageSize) - pageSize;&#10;        //System.out.println(String.format(&quot;select %s from %s order by id asc limit %s , %s &quot;,condition,tableName,index,pageSize));&#10;        String sql = String.format(&quot;select %s from %s where %s order by %s asc  limit %s , %s &quot;, &quot;*&quot;, tableName,where, getTablePk1(tableName),index, pageSize);&#10;        System.out.println(sql);&#10;        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();//0-5 5条 第一页  5-5 5条 第二页&#10;        //01234 1*（一页)-1 0 1*size-1 4&#10;        // 56789 2*(2ye)+1   2*size-1 9&#10;        // 1011121314 3*3+1  3*5-1&#10;        //1516171819 4*4-1   4*5-1&#10;        int count = 0;                                       // 1*size&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            //System.out.println(sql);&#10;            ResultSet rs = ps.executeQuery();&#10;            ResultSetMetaData psmd = rs.getMetaData();&#10;            count = psmd.getColumnCount();&#10;            while (rs.next()) {&#10;                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;                for (int i = 1; i &lt;= count; i++) {&#10;                    hm.put(psmd.getColumnName(i), rs.getObject(i));&#10;                }&#10;                list.add(hm);&#10;            }&#10;            rs.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return list;&#10;    }&#10;&#10;    public List&lt;Map&lt;String, Object&gt;&gt;  select(String tableName, String condition,String where){&#10;        String sql = String.format(&quot;select %s from %s where %s= ? order by %s asc &quot;, condition, tableName,condition,getTablePk1(tableName));&#10;        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();&#10;        int count = 0;&#10;        System.out.println(sql);// 1*size&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            //System.out.println(sql);&#10;            ps.setString(1,where);&#10;            ResultSet rs = ps.executeQuery();&#10;            ResultSetMetaData psmd = rs.getMetaData();&#10;            count = psmd.getColumnCount();&#10;            while (rs.next()) {&#10;                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;                for (int i = 1; i &lt;= count; i++) {&#10;                    hm.put(psmd.getColumnName(i), rs.getObject(i));&#10;                }&#10;                list.add(hm);&#10;            }&#10;            rs.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return list;&#10;    }&#10;    public String select(String tableName, String condition,String where,boolean b){&#10;        String sql = String.format(&quot;select %s from %s where %s= ? order by %s asc &quot;,condition,tableName,&quot;account&quot;,getTablePk1(tableName));&#10;        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();&#10;        int count = 0;&#10;        System.out.println(sql);&#10;        String s=&quot;&quot;;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            //System.out.println(sql);&#10;            ps.setString(1,where);&#10;            ResultSet rs = ps.executeQuery();&#10;            ResultSetMetaData psmd = rs.getMetaData();&#10;            count = psmd.getColumnCount();&#10;            while (rs.next()) {&#10;                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;                for (int i = 1; i &lt;= count; i++) {&#10;                    hm.put(psmd.getColumnName(i), rs.getObject(i));&#10;                }&#10;                list.add(hm);&#10;                String [] a = list.get(0).toString().split(&quot;=&quot;);&#10;               s = a[1].toString().substring(0,a[1].toString().length()-1);&#10;&#10;            }&#10;            rs.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return s;&#10;    }&#10;//    public List&lt;Map&lt;String, Object&gt;&gt; select(String tableName, String condition,String where) {&#10;//        //int index = (pages * pageSize) - pageSize;&#10;//        //System.out.println(String.format(&quot;select %s from %s order by id asc limit %s , %s &quot;,condition,tableName,index,pageSize));&#10;//        String sql = String.format(&quot;select %s from %s where %s order by %s asc &quot;, condition, tableName, where,getTablePk1(tableName));&#10;//        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();//0-5 5条 第一页  5-5 5条 第二页&#10;//        //01234 1*（一页)-1 0 1*size-1 4&#10;//        // 56789 2*(2ye)+1   2*size-1 9&#10;//        // 1011121314 3*3+1  3*5-1&#10;//        //1516171819 4*4-1   4*5-1&#10;//        System.out.println(sql);&#10;//        int count = 0;                                       // 1*size&#10;//        try {&#10;//            PreparedStatement ps = connection.prepareStatement(sql);&#10;//            //System.out.println(sql);&#10;//            ResultSet rs = ps.executeQuery();&#10;//            ResultSetMetaData psmd = rs.getMetaData();&#10;//            count = psmd.getColumnCount();&#10;//            while (rs.next()) {&#10;//                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;//                for (int i = 1; i &lt;= count; i++) {&#10;//                    hm.put(psmd.getColumnName(i), rs.getObject(i));&#10;//                }&#10;//                list.add(hm);&#10;//            }&#10;//            rs.close();&#10;//        } catch (SQLException throwables) {&#10;//            throwables.printStackTrace();&#10;//        }&#10;//        return list;&#10;//    }&#10;    public List&lt;Map&lt;String, Object&gt;&gt; selectKey(String tableName) {&#10;        String sql = String.format(&quot;show columns from  %s &quot;, tableName);&#10;        List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;&gt;();//0-5 5条 第一页  5-5 5条 第二页&#10;        //01234 1*（一页)-1 0 1*size-1 4&#10;        // 56789 2*(2ye)+1   2*size-1 9&#10;        // 1011121314 3*3+1  3*5-1&#10;        //1516171819 4*4-1   4*5-1&#10;        //System.out.println(sql);&#10;        int count = 0;                                       // 1*size&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            //System.out.println(sql);&#10;            ResultSet rs = ps.executeQuery();&#10;            ResultSetMetaData psmd = rs.getMetaData();&#10;            count = psmd.getColumnCount();&#10;            while (rs.next()) {&#10;                Map&lt;String, Object&gt; hm = new HashMap&lt;&gt;();&#10;&#10;                    hm.put(psmd.getColumnName(1), rs.getObject(&quot;field&quot;));&#10;                    //hm.put(psmd.getColumnName(count-2),rs.getObject(&quot;key&quot;));&#10;                    hm.put(&quot;key&quot;,rs.getObject(&quot;key&quot;));&#10;                list.add(hm);&#10;            }&#10;            rs.close();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return list;&#10;    }&#10;    /*&#10;    查看所有表 showTables()&#10;     */&#10;    public void showTables() {&#10;        String sql = &quot;show tables &quot;;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            ps.executeQuery();&#10;            ResultSet rs = ps.executeQuery();&#10;            while (rs.next()) {&#10;                System.out.println(rs.getString(1));&#10;            }&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;&#10;    }&#10;&#10;    public String selectVersion() {&#10;        String sql = &quot;select version() &quot;;&#10;        String result = &quot;&quot;;&#10;        try {&#10;            PreparedStatement ps = connection.prepareStatement(sql);&#10;            ps.executeQuery();&#10;            ResultSet rs = ps.executeQuery();&#10;            while (rs.next()) {&#10;                result = rs.getString(1);&#10;            }&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return result;&#10;    }&#10;&#10;&#10;&#10;    /*&#10;    关闭连接&#10;     */&#10;    public void close() {&#10;        if (connection != null) {&#10;            try {&#10;                connection.close();&#10;            } catch (SQLException throwables) {&#10;                throwables.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;&#10;}&#10;" shortcut="ENTER" description="public class JdbcUtils" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="Stringutils" value="package cn.netjic;&#10;import java.security.MessageDigest;&#10;import java.security.NoSuchAlgorithmException;&#10;import java.util.Random;&#10;/**&#10; * &lt;p&gt;Description&lt;/p&gt;&#10; *&#10; * @Auther: netjic@163.com&#10; * @Date: 2020/11/19/16:36&#10; */&#10;&#10;public class StringUtils {&#10;&#10;    public String getMaskStr(String str, int start, int end, String mask) {&#10;        StringBuilder s = new StringBuilder(str);&#10;        for (int i = start; i &lt; end; i++) {&#10;            s.replace(i, i + 1, mask);&#10;        }&#10;        return s.toString();&#10;    }&#10;&#10;    public String getMaskStrName(String name) {&#10;        String ok = &quot;&quot;;&#10;        if (name.isBlank() || name.isEmpty()) {&#10;            ok = &quot;***&quot;;&#10;        } else {&#10;            ok = name.length() &gt;= 4 ? getMaskStr(name, 1, 3, &quot;*&quot;) : getMaskStr(name, 1, 2, &quot;*&quot;);&#10;        }&#10;        return ok;&#10;    }&#10;&#10;    public String getMaskStrPhone(String phone) {&#10;        return getMaskStr(phone, 3, 7, &quot;*&quot;);&#10;    }&#10;&#10;    /**&#10;     * @param file&#10;     * @return&#10;     */&#10;    public String getFileName(String file) {&#10;        String fn = &quot;&quot;;&#10;        if (file.indexOf(&quot;/&quot;) != -1) {&#10;            fn = file.substring(file.lastIndexOf(&quot;/&quot;) + 1).toLowerCase();&#10;        } else if (file.indexOf(&quot;\\&quot;) != -1) {&#10;            fn = file.substring(file.lastIndexOf(&quot;\\&quot;) + 1).toLowerCase();&#10;        } else {&#10;            fn = file;&#10;        }&#10;        return fn;&#10;    }&#10;&#10;    public String getFileExt(String file) {&#10;        String ext = &quot;&quot;;&#10;        if (file.indexOf(&quot;.&quot;) == -1) {&#10;            ext = &quot;&quot;;&#10;        } else {&#10;            ext = file.substring(file.lastIndexOf(&quot;.&quot;)).toLowerCase();&#10;        }&#10;        return ext;&#10;    }&#10;&#10;    public String getFileBaseName(String file) {&#10;        String fn = getFileName(file);&#10;        if (fn.indexOf(&quot;.&quot;) != -1) {&#10;            fn = fn.substring(0, fn.lastIndexOf(&quot;.&quot;)).toLowerCase();&#10;        }&#10;        return fn;&#10;    }&#10;&#10;    public String getPath(String file) {&#10;        String p = &quot;./&quot;;&#10;        if (file.indexOf(&quot;/&quot;) != -1) {&#10;            p = file.substring(0, file.lastIndexOf(&quot;/&quot;) + 1).toLowerCase();&#10;        } else if (file.indexOf(&quot;\\&quot;) != -1) {&#10;            p = file.substring(0, file.lastIndexOf(&quot;\\&quot;) + 1).toLowerCase();&#10;        } else {&#10;&#10;        }&#10;        return p;&#10;    }&#10;&#10;    public String getHash(String password, String account) {&#10;        StringBuilder ok = new StringBuilder(32);&#10;        StringBuilder md5 = new StringBuilder(getMd5(password + account));&#10;        StringBuilder sha = new StringBuilder(getSha(password + account));&#10;        ok.append(md5.substring(0, 5));&#10;        ok.append(sha.substring(0, 5));&#10;        ok.append(md5.substring(15, 20));&#10;        ok.append(sha.substring(15, 20));&#10;        ok.append(md5.substring(25));&#10;        ok.append(sha.substring(35));&#10;        return ok.toString();&#10;&#10;    }&#10;&#10;    public String getSha(String password) {&#10;        StringBuilder pass = new StringBuilder(40);&#10;        try {&#10;            MessageDigest md = MessageDigest.getInstance(&quot;sha1&quot;);&#10;            md.update(password.getBytes());&#10;            for (byte b : md.digest()) {&#10;                pass.append(String.format(&quot;%02x&quot;, b));&#10;            }&#10;        } catch (NoSuchAlgorithmException e) {&#10;            e.printStackTrace();&#10;        }&#10;        return pass.toString();&#10;&#10;    }&#10;&#10;    public String getMd5(String password) {&#10;        StringBuilder pass = new StringBuilder(32);&#10;        try {&#10;            MessageDigest md = MessageDigest.getInstance(&quot;md5&quot;);&#10;            md.update(password.getBytes());&#10;            for (byte b : md.digest()) {&#10;                pass.append(String.format(&quot;%02x&quot;, b));&#10;            }&#10;        } catch (NoSuchAlgorithmException e) {&#10;            e.printStackTrace();&#10;        }&#10;        return pass.toString();&#10;&#10;    }&#10;&#10;    public int search(String src, String dst) {&#10;        int pos = 0;&#10;        int num = 0;&#10;        while (src.indexOf(dst, pos) != -1) {&#10;            pos = src.indexOf(dst, pos) + dst.length();&#10;            ++num;&#10;        }&#10;        return num;&#10;    }&#10;&#10;    /**&#10;     * &lt;p&gt;&#10;     * 功能：实现字符串逆序&#10;     * &lt;/p&gt;&#10;     *&#10;     * @param str&#10;     * @return&#10;     */&#10;    public String reverse(String str) {&#10;        StringBuilder s = new StringBuilder(str);&#10;        return s.reverse().toString();&#10;    }&#10;&#10;    public String getString() {&#10;        return getString(4);&#10;    }&#10;&#10;    public String getString(int length) {&#10;        StringBuilder s = new StringBuilder(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;);&#10;        StringBuilder str = new StringBuilder(length);&#10;        Random random = new Random();&#10;        for (int i = 0; i &lt; length; i++) {&#10;            str.append(s.charAt(random.nextInt(s.length())));&#10;        }&#10;        return str.toString();&#10;    }&#10;&#10;}&#10;&#10;" shortcut="ENTER" description="public class StringUtils" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="checkcode" value="package cn.netjic.utils;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.*;&#10;import java.awt.image.BufferedImage;&#10;import java.io.FileNotFoundException;&#10;import java.io.FileOutputStream;&#10;import java.io.IOException;&#10;import java.util.Random;&#10;&#10;/**&#10; * &lt;p&gt;Description&lt;/p&gt;&#10; *&#10; * @Auther: netjic@163.com&#10; * @Date: 2020/11/28/15:28&#10; */&#10;public class CheckCode {&#10;    public  String yan() {&#10;        Random r = new Random();&#10;&#10;        StringUtil s = new StringUtil();&#10;        String str=s.getString();&#10;        int w= 160;&#10;        int h= 80;&#10;        BufferedImage dst = new BufferedImage(w,h,6);&#10;        Graphics2D g = dst.createGraphics();&#10;        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_DEFAULT);&#10;        Font fo1 = null;&#10;        try {&#10;            fo1 = Font.createFont(Font.TRUETYPE_FONT,Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;font/c.ttf&quot;));&#10;        } catch (FontFormatException e) {&#10;            e.printStackTrace();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;        g.setColor(new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256)));&#10;        g.setStroke(new BasicStroke(1.0f));&#10;        double x2= r.nextDouble()*30+10;  //控制X轴出现的位置&#10;        double y2= 0;&#10;        int yy = r.nextInt(40)+10; //控制y轴出现的位置&#10;        int hh = 30; //上下高度的振幅&#10;        int aa = 100; //控制频率&#10;        for ( x2 = 10; x2 &lt;=360 ; x2+=0.1) {&#10;            y2=(yy +hh *Math.sin(x2*Math.PI/aa));&#10;            g.drawLine((int)x2,(int)y2,(int)x2,(int)y2);&#10;        }&#10;        StringBuilder aas=new StringBuilder();&#10;        for(int i=0;i&lt;str.length();i++){&#10;            g.setColor(new Color(r.nextInt(200),r.nextInt(200),r.nextInt(200)));&#10;            Font font = fo1.deriveFont(Font.PLAIN,r.nextInt(20)+50);&#10;            g.setFont(font);&#10;            String sa = String.valueOf(str.charAt(i));&#10;            FontMetrics fo = g.getFontMetrics();&#10;            int h1 = fo.getHeight();&#10;            int w1 = fo.stringWidth(sa);&#10;&#10;            int x1 = r.nextInt(20)+i*40;&#10;            int y1 = r.nextInt(80-h1/2)+h1/2;&#10;            aas.append(sa);&#10;            //            System.out.println(sa);&#10;&#10;            g.drawString(sa,x1,y1);&#10;&#10;        }&#10;&#10;        g.dispose();&#10;&#10;        try {&#10;            ImageIO.write(dst,&quot;png&quot;, new FileOutputStream(&quot;f:ji/asd.png&quot;));&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;        return aas.toString();&#10;    }&#10;}&#10;" shortcut="ENTER" description="public  String yan()" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="mservletj" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;&#10;            &lt;version&gt;4.0.1&lt;/version&gt;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#10;        &lt;/dependency&gt;" shortcut="ENTER" description="javax.servlet-api 4.0.1" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mdurid" value=" &lt;dependency&gt;&#10;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;&#10;            &lt;artifactId&gt;druid&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.3&lt;/version&gt;&#10;        &lt;/dependency&gt;" shortcut="ENTER" description="druid 1.2.3" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="datasource" value="package cn.netjic.one;&#10;&#10;import com.alibaba.druid.pool.DruidDataSource;&#10;import com.alibaba.druid.pool.DruidDataSourceFactory;&#10;&#10;import java.io.IOException;&#10;import java.sql.Connection;&#10;import java.sql.SQLException;&#10;import java.util.Properties;&#10;&#10;/**&#10; * &lt;p&gt;Description&lt;/p&gt;&#10; *&#10; * @Auther: netjic@163.com&#10; * @Date: 2020/11/28/15:50&#10; */&#10;public class DataSource {&#10;&#10;    static DruidDataSource dataSource;&#10;    private static Connection connection;&#10;    static {&#10;        Properties properties = new Properties();&#10;&#10;        try {&#10;            properties.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;db.properties&quot;));&#10;            dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);&#10;            connection = dataSource.getConnection();&#10;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    //返回Connection&#10;    public Connection getConnection(){&#10;        try {&#10;            Connection connection= dataSource.getConnection();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return connection;&#10;    }&#10;&#10;}&#10;&#10;druid.ClassName=com.mysql.cj.jdbc.Driver&#10;druid.url=jdbc:mysql://localhost:3306/shopadmin?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=PRC&#10;druid.password=&#10;druid.username=root&#10;druid.initialSize=10&#10;druid.maxActive=11" shortcut="ENTER" description="DruidDataSource dataSource" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="dmc" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;Context&gt;&#10;    &lt;Resource name=&quot;druid&quot; auth=&quot;Container&quot; type=&quot;javax.sql.DataSource&quot;&#10;              username=&quot;root&quot;&#10;              password=&quot;&quot;&#10;              driverClassName=&quot;com.mysql.cj.jdbc.Driver&quot;&#10;              url=&quot;jdbc:mysql://localhost:3306/shopadmin?serverTimezone=PRC&quot;&#10;              factory=&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;/&gt;&#10;&lt;/Context&gt;&#10;" shortcut="ENTER" description="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;Context&gt;     &lt;Resource name=&quot;druid&quot; auth=&quot;Container&quot; factory=&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;/&gt; &lt;/Context&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="druidprop" value="druid.ClassName=com.mysql.cj.jdbc.Driver&#10;druid.url=jdbc:mysql://localhost:3306/shopadmin?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=PRC&#10;druid.password=&#10;druid.username=root&#10;druid.initialSize=10&#10;druid.maxActive=11" shortcut="ENTER" description="druid.ClassName=com.mysql.cj.jdbc." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ANY_OPENAPI_JSON_FILE" value="false" />
      <option name="ANY_OPENAPI_YAML_FILE" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GENERAL_JSON_FILE" value="false" />
      <option name="GENERAL_YAML_FILE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
      <option name="XML_ATTRIBUTE" value="false" />
    </context>
  </template>
  <template name="druidutils" value="package cn.netjic;&#10;&#10;import com.alibaba.druid.pool.DruidDataSource;&#10;import com.alibaba.druid.pool.DruidDataSourceFactory;&#10;&#10;import javax.sql.DataSource;&#10;import java.io.IOException;&#10;import java.sql.Connection;&#10;import java.sql.SQLException;&#10;import java.util.Collection;&#10;import java.util.Properties;&#10;&#10;/**&#10; * &lt;p&gt;Description&lt;/p&gt;&#10; *&#10; * @Auther: netjic@163.com&#10; * @Date: 2020/11/24/16:39&#10; */&#10;public class Dd {&#10;    static DruidDataSource dataSource;&#10;    private static Connection connection;&#10;    static {&#10;        Properties properties = new Properties();&#10;&#10;        try {&#10;            properties.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;db.properties&quot;));&#10;            dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);&#10;           connection = dataSource.getConnection();&#10;&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    public Connection getConnection(){&#10;        try {&#10;             Connection connection= dataSource.getConnection();&#10;        } catch (SQLException throwables) {&#10;            throwables.printStackTrace();&#10;        }&#10;        return connection;&#10;    }&#10;&#10;}&#10;&#10;" shortcut="ENTER" description="alibaba.druid public class Dd {" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="mmail" value=" &lt;dependency&gt;&#10;            &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javax.mail&lt;/artifactId&gt;&#10;            &lt;version&gt;1.6.2&lt;/version&gt;&#10;        &lt;/dependency&gt;" shortcut="ENTER" description="javax.mail 1.6.2" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="out" value="out.print($end$);" shortcut="ENTER" description="out.print();" toReformat="false" toShortenFQNames="true">
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="dtf" value="DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);" shortcut="ENTER" description="DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="mcomfileupload" value=" &lt;dependency&gt;&#10;      &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;&#10;      &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;&#10;      &lt;version&gt;1.4&lt;/version&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="commons-fileupload 1.4" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="mcomio" value="&lt;dependency&gt;&#10;      &lt;groupId&gt;commons-io&lt;/groupId&gt;&#10;      &lt;artifactId&gt;commons-io&lt;/artifactId&gt;&#10;      &lt;version&gt;2.8.0&lt;/version&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="commons-io 2.8.0" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="ajp" value=" a.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);" shortcut="ENTER" description="a.setRequestHeader" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="pw" value="PrintWriter out = resp.getWriter();" shortcut="ENTER" description="PrintWriter out = resp.getWriter();" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="mfree" value="    &lt;dependency&gt;&#10;            &lt;groupId&gt;org.freemarker&lt;/groupId&gt;&#10;            &lt;artifactId&gt;freemarker&lt;/artifactId&gt;&#10;            &lt;version&gt;2.3.30&lt;/version&gt;&#10;    &lt;/dependency&gt;" shortcut="ENTER" description="org.freemarker2.3.30" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="border" value="border: black solid 1px;" shortcut="ENTER" description="border: black solid 1px" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
    </context>
  </template>
</templateSet>